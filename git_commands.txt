Rebase interactive:
- To change commit message
- To squash multiple commits


git rebase -i parent_commit_hash (of commit you want to change)

-> If change commit message then, use reword for that commit and save it.
-> If combine multiple commits then, use squash for latest commit you want to combine in and save it.

To change commit commit message of last commit,
git commit --amend -m "new message"

# cherry-pick

Use cherry-pick only if we made a commit to a wrong branch mistakenly and we want to 
pick that commit to different branch (be mindful before doing cherry-pick)

> git checkout feature1
  git cherry-pick <commit-SHA>

Then, if we want to clean up that commit from wrong branch, we could do like,
> git checkout wrong-branch
  git reset --hard HEAD~1

#### Git Fix Mistakes or bad commits

> Undo changes from working dir to last commit state,
    git checkout testfile.py

> If we forgot to add file(s) in our last commit along with other changes/files
    git add that_file.py
    git commit --amend [Press enter] and save the poped up file. It will include added that_file.py in that commit.

> Git Reset:
There're 3 options with git reset.

* soft:
    It delete that(last) commit and keep all the changes in file(s) in staging dir

    git reset --soft commit-sha

* mixed:
    It is default reset option. It keeps changes in staging dir or working dir depending 
    on the files specified.

    (Need to explore more on this)

    git reset commit-sha

* hard:
    It reset head to specified commit and undo changes of all tracked files to state they were
    where specified commit happened. Be mindful when using it.

    git reset --hard commit-sha


> To remove untracked files use git clean
    git clean -df

    Here, -d option removes untracked dirs, and f removes untracked files.

Note:
> git reset command changes the commit history. This is only recommended when we've changes 
    in local repo and haven't pushed it to remote yet.
  It can cause issue if someone has pulled those commit changes and then we change commit history.

> git revert is recommended in that case when someone has pulled commit changes and now we want to 
    revert back those changes while not changing git commit history but it will create another commit
    undoing those changes and won't cause issues.


